// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   /*
	Idea:
		Mux(x, false, zx) -> o1 - zero x?
		same for y using zy -> o3
		Fork both outputs to have a not option Not16(o1), Not16(o3)
		Mux(o1/o3, noto1/noto3, nx/ny) -> o2, o4
		Fork outputs for And16, Add16 -> o5, o6
		Mux16(o5, o6, f) -> o7 x&y f=0, x+y f=1
		Fork to have a 16-bit negated option
		Mux16(o7, noto7, no) -> break apart output to determine zr, ng at 3,7,11,15 bit places 
		//(these are where negatives lie in two's complement)
		If any bit in output is 1, zr = 0 so 8WayOr on all bits,
			that output passed to single Or(), that output passed to Not()
			to generate the opposite, if or yields 1, we need zr=0
		
		Or(And(out[3], out[7]), And(out[11], out[15])) -> ng
		Then we re-align all bits on bus
	Purpose:
		Full functional ALU w/ 27 operations
   **/
   Mux16(a=x, b[0..15]=false, sel=zx, out=o1);
   Mux16(a=y, b[0..15]=false, sel=zy, out=o3);
   
   Not16(in=o1, out=noto1);
   Not16(in=o3, out=noto3);
   
   Mux16(a=o1, b=noto1, sel=nx, out=o2);
   Mux16(a=o3, b=noto3, sel=ny, out=o4);
   
   And16(a=o2, b=o4, out=o5);
   Add16(a=o2, b=o4, out=o6);
   
   Mux16(a=o5, b=o6, sel=f, out=o7);
   
   Not16(in=o7, out=noto7);
   
   Mux16(a=o7, b=noto7, sel=no, out[0..2]=po1, out[3]=t1, out[4..6]=po2, out[7]=t2, out[8..10]=po3, out[11]=t3, out[12..14]=po4, out[15]=t4);
   
   Or8Way(in[0..2]=po1, in[3]=t1, in[4..6]=po2, in[7]=t2, out=pzr);
   Or8Way(in[0..2]=po3, in[3]=t3, in[4..6]=po4, in[7]=t4, out=pzr1);
   Or(a=pzr, b=pzr1, out=test);
   Not(in=test, out=zr);
   And(a=t1, b=t2, out=p1ng);
   And(a=t3, b=t4, out=p2ng);
   Or(a=p1ng, b=p2ng, out=ng);
   
   Mux16(a[0..2]=po1, a[3]=t1, a[4..6]=po2, a[7]=t2, a[8..10]=po3, a[11]=t3, a[12..14]=po4, a[15]=t4, b[0..15]=false, sel=false, out=out);
}